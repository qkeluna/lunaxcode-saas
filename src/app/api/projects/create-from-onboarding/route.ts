import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@/auth';
import { getCloudflareContext } from '@/lib/db/context';
import { drizzle } from 'drizzle-orm/d1';
import { projects, projectAnswers, questions, serviceTypes, tasks, users } from '@/lib/db/schema';
import { eq } from 'drizzle-orm';

export const runtime = 'edge';

export async function POST(request: NextRequest) {
  try {
    // 1. Check authentication
    const session = await auth();
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // 2. Get onboarding data from request
    const body = await request.json();
    const {
      serviceId,
      serviceName,
      description,
      questionAnswers,
      clientName,
      clientEmail,
      clientPhone
    } = body;

    // Validate required fields
    if (!serviceId || !description || !clientName || !clientEmail) {
      return NextResponse.json({
        error: 'Missing required fields',
        details: { serviceId, description, clientName, clientEmail }
      }, { status: 400 });
    }

    // 3. Get database connection
    const context = getCloudflareContext();
    if (!context) {
      return NextResponse.json({ error: 'Database context not available' }, { status: 503 });
    }

    const db = drizzle(context.env.DB);

    // 4. Get user ID from email (users table has id as primary key, not email)
    const [user] = await db
      .select()
      .from(users)
      .where(eq(users.email, session.user.email))
      .limit(1);

    if (!user) {
      return NextResponse.json({
        error: 'User not found. Please try logging in again.'
      }, { status: 404 });
    }

    // 5. Get service details
    const [service] = await db
      .select()
      .from(serviceTypes)
      .where(eq(serviceTypes.id, parseInt(serviceId)))
      .limit(1);

    if (!service) {
      return NextResponse.json({ error: 'Service not found' }, { status: 404 });
    }

    // 6. Parse timeline from service (e.g., "2-3 weeks" -> 21 days, "1-2 months" -> 45 days)
    let timelineDays = 30; // Default 30 days
    if (service.timeline) {
      const timelineStr = service.timeline.toLowerCase();
      if (timelineStr.includes('week')) {
        const weeks = parseInt(timelineStr.split('-')[1] || '2');
        timelineDays = weeks * 7;
      } else if (timelineStr.includes('month')) {
        const months = parseInt(timelineStr.split('-')[1] || '2');
        timelineDays = months * 30;
      }
    }

    // 7. Create project record
    const [project] = await db
      .insert(projects)
      .values({
        userId: user.id, // Use actual user ID from database
        serviceTypeId: service.id,
        name: `${serviceName} for ${clientName}`,
        service: serviceName,
        description: description,
        clientName: clientName,
        clientEmail: clientEmail,
        clientPhone: clientPhone || null,
        price: service.basePrice,
        timeline: timelineDays, // Use parsed timeline from service type
        budget: service.basePrice,
        prd: '', // Will be generated by AI (empty string to satisfy NOT NULL constraint)
        status: 'pending',
        paymentStatus: 'pending',
        depositAmount: 0,
        createdAt: new Date(),
        updatedAt: new Date(),
      })
      .returning();

    console.log('✅ Project created:', project.id);

    // 7. Store question answers
    if (questionAnswers && typeof questionAnswers === 'object') {
      const answers = Object.entries(questionAnswers);

      for (const [questionKey, answerValue] of answers) {
        try {
          // Get question ID
          const [question] = await db
            .select()
            .from(questions)
            .where(eq(questions.questionKey, questionKey))
            .limit(1);

          if (question) {
            await db.insert(projectAnswers).values({
              projectId: project.id,
              questionId: question.id,
              questionKey: questionKey,
              answerValue: typeof answerValue === 'object'
                ? JSON.stringify(answerValue)
                : String(answerValue),
              createdAt: new Date(),
            });
          }
        } catch (error) {
          console.error(`Error storing answer for ${questionKey}:`, error);
          // Continue with other answers even if one fails
        }
      }

      console.log(`✅ ${answers.length} question answers stored`);
    }

    // 8. Set initial PRD message (Admin will generate it later)
    await db
      .update(projects)
      .set({
        prd: `# Project Requirements Document

## Project Overview

**Project Name**: ${serviceName} for ${clientName}

**Service Type**: ${serviceName}

**Description**: ${description}

---

## Status Update

Your project has been successfully submitted! Our team is currently reviewing your requirements.

## What Happens Next?

1. **Team Review** - Our experts will analyze your project requirements (24-48 hours)
2. **PRD Creation** - We'll create a comprehensive requirements document
3. **Task Planning** - We'll break down the project into detailed tasks
4. **Your Review** - You'll review and approve the project plan
5. **Payment** - 50% deposit to begin development
6. **Project Kickoff** - Development begins once deposit is verified

## Expected Timeline

- **PRD Completion**: 24-48 hours
- **Your Review**: 2-3 business days  
- **Project Start**: After 50% deposit payment is verified

## Need Changes?

If you need to update your project requirements or have questions, please contact our team anytime.

---

*Our team will reach out to you shortly with the complete Project Requirements Document and task breakdown.*`,
        updatedAt: new Date()
      })
      .where(eq(projects.id, project.id));

    console.log('✅ Project created with pending PRD (Admin will generate)');

    // 9. Return success immediately
    return NextResponse.json({
      success: true,
      projectId: project.id,
      message: 'Project created successfully. Our team will review and generate the PRD shortly.',
      redirectUrl: `/projects/${project.id}`
    });

  } catch (error: any) {
    console.error('Error creating project:', error);
    return NextResponse.json(
      {
        error: error.message || 'Failed to create project',
        details: error.stack
      },
      { status: 500 }
    );
  }
}
